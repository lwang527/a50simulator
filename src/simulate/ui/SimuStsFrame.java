package simulate.ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.WindowConstants;

import common.ConfigConst;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Administrator
 */
public class SimuStsFrame extends JFrame {

	public static SimuStsFrame MainFrame = new SimuStsFrame("Futures Trade Dynamic Charts");
    /**
	 * SerialVersionUID
	 */
	private static final long serialVersionUID = 1619686928131714098L;
	
	// Variables declaration - do not modify                     
    private JButton buttonConfirm;
    private JButton buttonOrder;
    private HistoryChart chartPanel;
    private JLabel lable_screen;
    private JLabel lable_volume;
    private JTextField spinner_screen;
    private JTextField spinner_volume;
    // End of variables declaration                 
    
	/**
     * Creates new form StsFrame
     */
    public SimuStsFrame(String title) {
    	super(title);
    	ConfigConst.SCREEN_SHOW_TIMESPAN = 0.1;
        ConfigConst.CANDLESTICK_TIMESPAN = 15;
        initComponents(title);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents(String title) {
    	
    	setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setFont(new Font("宋体", 0, 12));
        
        lable_screen = new JLabel();
        lable_screen.setText("Screen/h:");
        
        spinner_screen = new JTextField();
        spinner_screen.setFont(new Font("Times New Roman", 0, 12));
        spinner_screen.setText(String.valueOf(ConfigConst.SCREEN_SHOW_TIMESPAN));
        
        lable_volume = new JLabel();
        lable_volume.setText("Volume&Candle/s:");
        
        spinner_volume = new JTextField();
        spinner_volume.setFont(new Font("Times New Roman", 0, 12));
        spinner_volume.setText(String.valueOf(ConfigConst.CANDLESTICK_TIMESPAN));
        
        buttonConfirm = new JButton();
        buttonConfirm.setText("Reset Timespan");
        buttonConfirm.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				ConfigConst.SCREEN_SHOW_TIMESPAN = Double.parseDouble(spinner_screen.getText().trim());
				ConfigConst.CANDLESTICK_TIMESPAN = Integer.parseInt(spinner_volume.getText().trim());
				chartPanel.modifyWindow();
			}
		});
        
        buttonOrder = new JButton();
        buttonOrder.setText("Place an Order");
        buttonOrder.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
//				JOrderDialog dialog = new JOrderDialog();
//				dialog.setVisible(true);
			}
		});
        
        chartPanel = new HistoryChart();
        chartPanel.setPreferredSize(new Dimension(1280, 800));
        chartPanel.setBackground(new Color(255, 255, 255));
        chartPanel.setInitialDelay(0);
        chartPanel.setReshowDelay(0);
        chartPanel.setDismissDelay(2500);
        chartPanel.setPopupMenu(null);
        chartPanel.setDomainZoomable(false);
        chartPanel.setRangeZoomable(false);
        
        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup()
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lable_screen)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(spinner_screen, 70, 70, 70)
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addComponent(lable_volume)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(spinner_volume, 70, 70, 70)
                        .addPreferredGap(ComponentPlacement.UNRELATED))
//                        .addComponent(buttonConfirm)
//	                    .addPreferredGap(ComponentPlacement.UNRELATED)
//	                    .addComponent(buttonOrder))
                    .addGroup(layout.createSequentialGroup()
                    		.addContainerGap()
                            .addComponent(chartPanel))
        );
        layout.setVerticalGroup(
        		layout.createSequentialGroup()
                	.addGroup(layout.createParallelGroup()
                        .addComponent(lable_screen, 25, 25, 25)
                        .addComponent(spinner_screen, 25, 25, 25)
                        .addComponent(lable_volume, 25, 25, 25)
                        .addComponent(spinner_volume, 25, 25, 25))
//                        .addComponent(buttonConfirm, 25, 25, 25)
//                        .addComponent(buttonOrder, 25, 25, 25))
                 .addGroup(layout.createParallelGroup()
                        .addComponent(chartPanel))
            );

        pack();
        setLocationRelativeTo(this.getOwner());
        new Thread(chartPanel, "dataclient.ui.series.PriceSeries").start();
//        new Thread(chartPanel, "dataclient.ui.series.VolumeSeries").start();
//        new Thread(chartPanel, "dataclient.ui.series.CandleSeries").start();
    }
}
